from django.db import models
from django.utils import timezone


class Sport(models.Model):
    key = models.CharField(max_length=50, unique=True)  # 'cs2', 'dota2'
    title = models.CharField(max_length=100)
    active = models.BooleanField(default=True)

    def __str__(self):
        return self.title


class Match(models.Model):
    STATUS_CHOICES = [
        ('upcoming', '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π'),
        ('live', '–í –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω'),
    ]

    RESULT_CHOICES = [
        ('home', '–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤'),
        ('away', '–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω'),
    ]

    # –î–∞–Ω–Ω—ã–µ –æ—Ç API
    api_id = models.CharField(max_length=100, unique=True)
    sport = models.ForeignKey(Sport, on_delete=models.CASCADE)

    # –ö–æ–º–∞–Ω–¥—ã
    home_team = models.CharField(max_length=100)
    away_team = models.CharField(max_length=100)

    # –í—Ä–µ–º—è
    commence_time = models.DateTimeField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='upcoming')

    # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û –ü–û–õ–ï
    result = models.CharField(
        max_length=10,
        choices=RESULT_CHOICES,
        blank=True,
        null=True,
        help_text="–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)"
    )

    # –ú–µ—Ç–∞
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['commence_time']

    def __str__(self):
        return f"{self.home_team} vs {self.away_team}"

    # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –ú–ï–¢–û–î–´
    def finish_match(self, winner):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–≤–∫–∏"""
        if self.status == 'completed' and self.result:
            return False, "–ú–∞—Ç—á —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω"

        self.status = 'completed'
        self.result = winner
        self.save()

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞–≤–∫–∏
        return self.calculate_bets()

    def calculate_bets(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –º–∞—Ç—á"""
        from accounts.models import Transaction

        if not self.result:
            return False, "–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
        pending_bets = self.bets.filter(status='pending')

        winners_count = 0
        losers_count = 0
        total_payout = 0

        for bet in pending_bets:
            if self.result == 'cancelled':
                # –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –º–∞—Ç—á–∞ - –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏
                bet.status = 'cancelled'
                bet.save()

                # –í–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
                bet.user.profile.balance += bet.amount
                bet.user.profile.save()

                # –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞
                Transaction.objects.create(
                    user=bet.user,
                    amount=bet.amount,
                    transaction_type='refund',
                    status='completed',
                    comment=f'–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –º–∞—Ç—á {self.home_team} vs {self.away_team}'
                )

            elif bet.outcome == self.result:
                old_balance = bet.user.profile.balance

                print(f"üîç Bet ID: {bet.id}")
                print(f"üí∞ Amount: {bet.amount}")
                print(f"üìä Odds: {bet.odds}")
                print(f"üéØ Potential win: {bet.potential_win}")
                print(f"üí≥ Balance before: {old_balance}")

                # –í—ã–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞
                bet.status = 'won'
                bet.save()

                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                bet.user.refresh_from_db()

                print(f"üí≥ Balance after: {bet.user.profile.balance}")
                print(f"‚ûï Added: {bet.user.profile.balance - old_balance}")
                print("---")

                # –°–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–∏–≥—Ä—ã—à–∞
                Transaction.objects.create(
                    user=bet.user,
                    amount=bet.potential_win,
                    transaction_type='win',
                    status='completed',
                    comment=f'–í—ã–∏–≥—Ä—ã—à –ø–æ —Å—Ç–∞–≤–∫–µ –Ω–∞ {self.home_team} vs {self.away_team}'
                )

                winners_count += 1
                total_payout += bet.potential_win

            else:
                # –ü—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è —Å—Ç–∞–≤–∫–∞
                bet.status = 'lost'
                bet.save()
                losers_count += 1

        if self.result == 'cancelled':
            return True, f"–ú–∞—Ç—á –æ—Ç–º–µ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –ø–æ {pending_bets.count()} —Å—Ç–∞–≤–∫–∞–º"
        else:
            return True, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞–≤–æ–∫: {winners_count} –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö, {losers_count} –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö. –í—ã–ø–ª–∞—á–µ–Ω–æ: {total_payout} ü™ô"


class Bookmaker(models.Model):
    key = models.CharField(max_length=50, unique=True)
    title = models.CharField(max_length=100)
    active = models.BooleanField(default=True)

    def __str__(self):
        return self.title


class Odds(models.Model):
    OUTCOME_CHOICES = [
        ('home', '–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤'),
        ('away', '–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π'),
        ('draw', '–ù–∏—á—å—è'),  # –ï—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    ]

    match = models.ForeignKey(Match, on_delete=models.CASCADE, related_name='odds')
    bookmaker = models.ForeignKey(Bookmaker, on_delete=models.CASCADE)

    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    outcome = models.CharField(max_length=10, choices=OUTCOME_CHOICES)
    price = models.DecimalField(max_digits=6, decimal_places=2)  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç

    # –ú–µ—Ç–∞
    last_update = models.DateTimeField()

    class Meta:
        unique_together = ['match', 'bookmaker', 'outcome']


class Bet(models.Model):
    STATUS_CHOICES = [
        ('pending', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
        ('won', '–í—ã–∏–≥—Ä–∞–Ω–∞'),
        ('lost', '–ü—Ä–æ–∏–≥—Ä–∞–Ω–∞'),
        ('cancelled', '–û—Ç–º–µ–Ω–µ–Ω–∞'),
    ]

    OUTCOME_CHOICES = [
        ('home', '–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤'),
        ('away', '–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π'),
    ]

    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='bets')
    match = models.ForeignKey(Match, on_delete=models.CASCADE, related_name='bets')

    outcome = models.CharField(max_length=10, choices=OUTCOME_CHOICES)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    odds = models.DecimalField(max_digits=6, decimal_places=2)
    potential_win = models.DecimalField(max_digits=10, decimal_places=2)

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.match} - {self.amount}"
