import requests
from decimal import Decimal
from django.conf import settings
from django.utils import timezone
from datetime import datetime
from ..models import Sport, Match, Bookmaker, Odds


class PandaScoreService:
    BASE_URL = "https://api.pandascore.co"

    def __init__(self):
        self.api_key = settings.PANDASCORE_API_KEY
        self.headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Accept': 'application/json'
        }

    def get_videogames(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä"""
        url = f"{self.BASE_URL}/videogames"
        response = requests.get(url, headers=self.headers)

        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä: {response.status_code} - {response.text}")
            return []

    def get_upcoming_matches(self, videogame_slug=None, per_page=50):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏"""
        url = f"{self.BASE_URL}/matches/upcoming"
        params = {
            'per_page': per_page,
            'sort': 'begin_at'
        }

        if videogame_slug:
            params['filter[videogame]'] = videogame_slug

        response = requests.get(url, headers=self.headers, params=params)

        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π: {response.status_code} - {response.text}")
            return []

    def get_running_matches(self, videogame_slug=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏"""
        url = f"{self.BASE_URL}/matches/running"
        params = {}

        if videogame_slug:
            params['filter[videogame]'] = videogame_slug

        response = requests.get(url, headers=self.headers, params=params)

        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–µ–π: {response.status_code}")
            return []

    def sync_matches_from_pandascore(self, videogame_slug):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ–π –∏–∑ PandaScore"""
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è {videogame_slug}...")

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ä—Ç
        sport_mapping = {
            'cs-go': 'CS2',
            'dota2': 'Dota 2',
            'lol': 'League of Legends',
            'valorant': 'Valorant'
        }

        sport, created = Sport.objects.get_or_create(
            key=videogame_slug,
            defaults={
                'title': sport_mapping.get(videogame_slug, videogame_slug.upper()),
                'active': True
            }
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
        upcoming_matches = self.get_upcoming_matches(videogame_slug)
        running_matches = self.get_running_matches(videogame_slug)

        all_matches = upcoming_matches + running_matches

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_matches)} –º–∞—Ç—á–µ–π")

        # –°–æ–∑–¥–∞–µ–º –±—É–∫–º–µ–∫–µ—Ä–∞ PandaScore
        bookmaker, created = Bookmaker.objects.get_or_create(
            key='ggbet',
            defaults={'title': 'ggbet', 'active': True}
        )

        for match_data in all_matches:
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                begin_at = match_data.get('begin_at')
                if begin_at:
                    commence_time = datetime.fromisoformat(begin_at.replace('Z', '+00:00'))
                else:
                    commence_time = timezone.now()

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                opponents = match_data.get('opponents', [])
                if len(opponents) >= 2:
                    home_team = opponents[0].get('opponent', {}).get('name', 'Team 1')
                    away_team = opponents[1].get('opponent', {}).get('name', 'Team 2')
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç—á–∏ –±–µ–∑ –∫–æ–º–∞–Ω–¥

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = 'upcoming'
                if match_data.get('status') == 'running':
                    status = 'live'
                elif match_data.get('status') in ['finished', 'canceled']:
                    status = 'completed'

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á
                match, created = Match.objects.update_or_create(
                    api_id=str(match_data['id']),
                    defaults={
                        'sport': sport,
                        'home_team': home_team,
                        'away_team': away_team,
                        'commence_time': commence_time,
                        'status': status
                    }
                )

                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (PandaScore –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                import random
                home_odds = round(random.uniform(1.4, 2.5), 2)
                away_odds = round(random.uniform(1.4, 2.5), 2)

                Odds.objects.update_or_create(
                    match=match,
                    bookmaker=bookmaker,
                    outcome='home',
                    defaults={
                        'price': Decimal(str(home_odds)),
                        'last_update': timezone.now()
                    }
                )

                Odds.objects.update_or_create(
                    match=match,
                    bookmaker=bookmaker,
                    outcome='away',
                    defaults={
                        'price': Decimal(str(away_odds)),
                        'last_update': timezone.now()
                    }
                )

                if created:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–∞—Ç—á: {home_team} vs {away_team}")
                else:
                    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ç—á: {home_team} vs {away_team}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                continue

        print(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {videogame_slug} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
