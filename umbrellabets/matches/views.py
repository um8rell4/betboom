from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from decimal import Decimal
from .models import Match, Sport, Odds, Bet
from accounts.models import User
from accounts.models import Transaction
import json


def matches_list(request):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π"""
    sport_filter = request.GET.get('sport', 'all')

    # –ü–æ–ª—É—á–∏—Ç—å live –º–∞—Ç—á–∏
    live_matches = Match.objects.filter(
        status='live'
    ).select_related('sport').prefetch_related('odds__bookmaker')

    if sport_filter != 'all':
        live_matches = live_matches.filter(sport__key=sport_filter)

    # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
    upcoming_matches = Match.objects.filter(
        commence_time__gte=timezone.now(),
        status='upcoming'
    ).select_related('sport').prefetch_related('odds__bookmaker')

    if sport_filter != 'all':
        upcoming_matches = upcoming_matches.filter(sport__key=sport_filter)

    sports = Sport.objects.filter(active=True)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –ø–æ —Å–ø–æ—Ä—Ç—É
    matches_by_sport = {}
    for match in upcoming_matches:
        sport_key = match.sport.key
        if sport_key not in matches_by_sport:
            matches_by_sport[sport_key] = {
                'sport': match.sport,
                'matches': []
            }
        matches_by_sport[sport_key]['matches'].append(match)

    # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_matches = Match.objects.count()
    total_bets = Bet.objects.count()
    total_users = User.objects.filter(bets__isnull=False).distinct().count()
    upcoming_count = matches_by_sport.values() if matches_by_sport else 0

    context = {
        'live_matches': live_matches,
        'matches_by_sport': matches_by_sport,
        'sports': sports,
        'current_sport': sport_filter,
        'total_matches': total_matches,
        'total_bets': total_bets,
        'total_users': total_users,
        'upcoming_count': sum(
            len(sport_data['matches']) for sport_data in matches_by_sport.values()) if matches_by_sport else 0
    }
    return render(request, 'matches/matches_list.html', context)


def match_detail(request, match_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞"""
    match = get_object_or_404(Match, id=match_id)

    # –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ö–æ–¥–∞
    home_odds = match.odds.filter(outcome='home').order_by('-price').first()
    away_odds = match.odds.filter(outcome='away').order_by('-price').first()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è JavaScript (–±–µ–∑ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏)
    odds_data = {}
    for odds in match.odds.all():
        odds_data[odds.id] = float(odds.price)

    odds_json = json.dumps(odds_data)

    # –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ö–æ–¥–∞
    home_odds = match.odds.filter(outcome='home').order_by('-price').first()
    away_odds = match.odds.filter(outcome='away').order_by('-price').first()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á
    total_bets = match.bets.count()
    home_bets_count = match.bets.filter(outcome='home').count()
    away_bets_count = match.bets.filter(outcome='away').count()

    # –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Å—Ç–∞–≤–æ–∫
    home_percentage = (home_bets_count / total_bets * 100) if total_bets > 0 else 50
    away_percentage = (away_bets_count / total_bets * 100) if total_bets > 0 else 50

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏
    can_bet = match.commence_time > timezone.now() and match.status == 'upcoming'

    context = {
         'match': match,
        'home_odds': home_odds,
        'away_odds': away_odds,
        'odds_json': odds_json,
        'total_bets': total_bets,
        'home_percentage': round(home_percentage, 1),
        'away_percentage': round(away_percentage, 1),
        'can_bet': can_bet,
        'odds': match.odds.select_related('bookmaker').order_by('outcome')
    }
    return render(request, 'matches/match_detail.html', context)


@login_required
def place_bet(request, match_id):
    """–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
    if request.method == 'POST':
        match = get_object_or_404(Match, id=match_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—á –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è
        if match.commence_time <= timezone.now() or match.status != 'upcoming':
            messages.error(request, "–°—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è")
            return redirect('matches:match_detail', match_id=match_id)

        outcome = request.POST.get('outcome')
        amount = request.POST.get('amount')

        try:
            amount = Decimal(amount)

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
            if amount < 10:
                messages.error(request, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 ü™ô")
                return redirect('matches:match_detail', match_id=match_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if request.user.profile.balance < amount:
                messages.error(request, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ")
                return redirect('matches:match_detail', match_id=match_id)

            # –ù–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            odds_obj = match.odds.filter(outcome=outcome).first()
            if not odds_obj:
                messages.error(request, "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return redirect('matches:match_detail', match_id=match_id)

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
            bet = Bet.objects.create(
                user=request.user,
                match=match,
                outcome=outcome,
                amount=amount,
                odds=odds_obj.price,
                potential_win=amount * odds_obj.price
            )

            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
            request.user.profile.balance -= amount
            request.user.profile.save()

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            from accounts.models import Transaction
            Transaction.objects.create(
                user=request.user,
                amount=-amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
                transaction_type='bet',
                status='completed',
                comment=f'–°—Ç–∞–≤–∫–∞ –Ω–∞ –º–∞—Ç—á {match.home_team} vs {match.away_team}'
            )

            messages.success(request, f"‚úÖ –°—Ç–∞–≤–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {bet.potential_win} ü™ô")
            return redirect('accounts:profile')

        except (ValueError, TypeError):
            messages.error(request, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏")

    return redirect('matches:match_detail', match_id=match_id)
